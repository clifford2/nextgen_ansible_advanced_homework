# For creating Dynamic inventory in Ansible tower. Use `AWS Access Key` for credential

- name: Create Dynamic Inventory
  tower_inventory:
    name: "{{ec2_dynamic_inventory}}"
    organization: "{{org_name}}"
    state: present


- name: Create groups needed to deploy app (AWS tags)
  tower_group:
    name: "{{item}}"
    inventory: "{{ec2_dynamic_inventory}}"
    state: present
  loop:
    - tag_AnsibleGroup_bastions
    - tag_AnsibleGroup_frontends
    - tag_AnsibleGroup_apps
    - tag_AnsibleGroup_appdbs
    - bastions
    - frontends
    - apps 
    - appdbs

- name: Associate AWS tags as children to smarter group names
  command: |
    tower-cli group associate --group "tag_AnsibleGroup_{{item}}" --parent "{{item}}" --inventory "{{ec2_dynamic_inventory}}"
  loop:
    - bastions
    - frontends
    - apps 
    - appdbs

- name: Add localhost as host 
  tower_host:
    name: "localhost"
    inventory: "{{ec2_dynamic_inventory}}"
    variables: "@/tmp/inventory_vars.json"
    state: present
    tower_host: tower1.{{tower_GUID}}.example.opentlc.com
    tower_username: "{{ tower_user }}"
    tower_password: "{{ tower_password }}"
    tower_verify_ssl: no

- name: Create inventory source with ec2 script
  # tower-cli inventory_source create -n "{{ec2_inventory_source}}" --inventory "{{ec2_dynamic_inventory}}" --source ec2 --credential "{{aws_read_keys}}" --source-regions "{{aws_region_name}}" --instance-filters "{{tag_filters}}" --overwrite yes --update-on-launch yes
  tower_inventory_source:
    name: "{{ec2_inventory_source}}"
    inventory: "{{ec2_dynamic_inventory}}"
    source: ec2
    credential: "{{aws_read_keys}}"
    source_regions: "{{aws_region_name}}"
    instance_filters: "{{tag_filters}}"
    update_on_launch: true
    overwrite: true
    state: present
